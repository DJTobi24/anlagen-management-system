name: CI/CD Production Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality and Build
  quality-check:
    name: Code Quality & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          
      - name: Install backend dependencies
        run: npm ci
        
      - name: Install frontend dependencies
        run: cd frontend && npm ci
        
      - name: Run backend ESLint
        run: npm run lint || true
        
      - name: Run frontend ESLint  
        run: cd frontend && npm run lint || true
        
      - name: TypeScript type check (Backend)
        run: npm run build
        
      - name: Build frontend
        run: cd frontend && npm run build
        env:
          REACT_APP_API_URL: /api/v1
          REACT_APP_APP_NAME: Anlagen-Management-System
          REACT_APP_VERSION: ${{ github.sha }}
          
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # Security Scans
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          
      - name: Run npm audit (Backend)
        run: npm audit --audit-level=moderate || true
        continue-on-error: true
        
      - name: Run npm audit (Frontend)
        run: cd frontend && npm audit --audit-level=moderate || true
        continue-on-error: true

  # Integration Tests with Database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-check]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: anlagen_test
          POSTGRES_USER: anlagen_user
          POSTGRES_PASSWORD: anlagen_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install backend dependencies
        run: npm ci
        
      - name: Run database migrations
        run: |
          for file in src/migrations/*.sql; do
            echo "Running migration: $file"
            PGPASSWORD=anlagen_password psql -h localhost -U anlagen_user -d anlagen_test -f "$file"
          done
        
      - name: Test backend startup
        run: |
          npm run build
          timeout 30s npm start || true
        env:
          NODE_ENV: test
          PORT: 3000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: anlagen_test
          DB_USER: anlagen_user
          DB_PASSWORD: anlagen_password
          JWT_SECRET: test-jwt-secret
          REDIS_URL: redis://localhost:6379

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: anlagen-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      - name: Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.simple
          platforms: linux/amd64
          push: false
          tags: anlagen-frontend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Full System Test with Docker Compose
  system-test:
    name: Full System Test
    runs-on: ubuntu-latest
    needs: [integration-tests, build-docker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create .env file
        run: |
          cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          DB_HOST=db
          DB_PORT=5432
          DB_NAME=anlagen_management
          DB_USER=anlagen_user
          DB_PASSWORD=anlagen_password
          JWT_SECRET=your-jwt-secret-key-here
          REDIS_URL=redis://redis:6379
          EOF
          
      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start
          
      - name: Check backend health
        run: |
          curl -f http://localhost:3000/api/v1/health || exit 1
          
      - name: Check frontend
        run: |
          curl -f http://localhost:80 || exit 1
          
      - name: Test authentication endpoint
        run: |
          curl -f -X POST http://localhost:3000/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"admin@swm.de","password":"wrong"}' || true
            
      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Deploy to Production (on main branch only)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [system-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy notification
        run: |
          echo "✅ All tests passed! Ready for deployment."
          echo "Deployment SHA: ${{ github.sha }}"
          echo "Deployment time: $(date)"
          
      # Add your actual deployment steps here
      # For example:
      # - SSH to production server
      # - Pull latest code
      # - Run docker-compose up -d
      # - Run migrations
      # etc.
          
  # Notify on completion
  notify:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, integration-tests, build-docker, system-test]
    if: always()
    
    steps:
      - name: Check status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ Pipeline failed!"
            exit 1
          else
            echo "✅ Pipeline successful!"
          fi