name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_anlagen_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        NODE_ENV=test
        PORT=3000
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_anlagen_db
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=test_anlagen_db
        DB_USER=test_user
        DB_PASSWORD=test_password
        JWT_SECRET=test-secret-key-for-testing-only
        JWT_EXPIRES_IN=1d
        REDIS_URL=redis://localhost:6379
        LOG_LEVEL=error
        IMPORT_WORKERS=5
        MAX_FILE_SIZE=10485760
        EOF
    
    - name: Run database migrations
      run: |
        npm run migrate
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_anlagen_db
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run type check
      run: npm run typecheck || npx tsc --noEmit
    
    - name: Run tests
      run: npm test || true
      env:
        NODE_ENV: test
    
    - name: Run security check
      run: |
        chmod +x scripts/security-check.sh
        ./scripts/security-check.sh || true
    
    - name: Build application
      run: npm run build

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linter
      working-directory: ./frontend
      run: npm run lint || true
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test
      env:
        CI: true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  docker-build:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: anlagen-management-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: false
        tags: anlagen-management-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for vulnerabilities
      run: |
        npm audit --production --audit-level=high || true
        
    - name: Check outdated packages
      run: npm outdated || true

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run code complexity analysis
      run: |
        npx eslint . --format json --output-file eslint-report.json || true
        
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json