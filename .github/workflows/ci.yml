name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefix backend
          npm ci --prefix frontend
          
      - name: Run ESLint (Backend)
        run: npm run lint --prefix backend
        
      - name: Run ESLint (Frontend)
        run: npm run lint --prefix frontend
        
      - name: Check Prettier formatting (Backend)
        run: npm run format:check --prefix backend
        
      - name: Check Prettier formatting (Frontend)
        run: npm run format:check --prefix frontend
        
      - name: TypeScript type check (Frontend)
        run: npm run type-check --prefix frontend

  # Security Scans
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefix backend
          npm ci --prefix frontend
          
      - name: Run npm audit (Backend)
        run: npm audit --audit-level=high --prefix backend
        continue-on-error: true
        
      - name: Run npm audit (Frontend)
        run: npm audit --audit-level=high --prefix frontend
        continue-on-error: true
        
      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: anlagen_management_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install backend dependencies
        run: npm ci --prefix backend
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
      - name: Run database migrations
        run: npm run db:migrate --prefix backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: anlagen_management_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          REDIS_URL: redis://localhost:6379
          
      - name: Run backend unit tests
        run: npm run test:coverage --prefix backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: anlagen_management_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          REDIS_URL: redis://localhost:6379
          
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/coverage/
            backend/test-results.xml

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        run: npm ci --prefix frontend
        
      - name: Run frontend unit tests
        run: npm run test:coverage --prefix frontend
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:5000/api
          
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results.xml

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: anlagen_management_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefix backend
          npm ci --prefix frontend
          
      - name: Build frontend
        run: npm run build --prefix frontend
        env:
          REACT_APP_API_URL: http://localhost:5000/api
          
      - name: Start backend server
        run: |
          npm run db:migrate --prefix backend
          npm run db:seed --prefix backend
          npm start --prefix backend &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 5000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: anlagen_management_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          REDIS_URL: redis://localhost:6379
          
      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 2; done'
          
      - name: Run integration tests
        run: npm run test:integration --prefix backend
        env:
          API_BASE_URL: http://localhost:5000/api

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: anlagen_management_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefix backend
          npm ci --prefix frontend
          
      - name: Install Playwright
        run: npx playwright install --with-deps
        working-directory: frontend
        
      - name: Build and start application
        run: |
          # Build frontend
          npm run build --prefix frontend
          
          # Start backend
          npm run db:migrate --prefix backend
          npm run db:seed --prefix backend
          npm start --prefix backend &
          
          # Serve frontend
          npx serve -s build -l 3000 &
          
          # Wait for services
          sleep 15
        env:
          NODE_ENV: test
          PORT: 5000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: anlagen_management_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test-jwt-secret-for-ci-pipeline
          REACT_APP_API_URL: http://localhost:5000/api
        working-directory: frontend
        
      - name: Run E2E tests
        run: npx playwright test
        working-directory: frontend
        env:
          BASE_URL: http://localhost:3000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ams-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Extract metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ams-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_VERSION=${{ github.sha }}

  # Security Container Scan
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/ams-backend:latest
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          
      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/ams-frontend:latest
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'backend-trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'frontend-trivy-results.sarif'

  # Deployment (nur auf main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, build-images]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Hier würde der tatsächliche Deployment-Code stehen
          # z.B. kubectl apply, docker-compose up, etc.
        env:
          DEPLOY_ENV: staging
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, build-images, container-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Hier würde der tatsächliche Deployment-Code stehen
        env:
          DEPLOY_ENV: production

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
        run: |
          echo "✅ Deployment successful!"
          # Hier könnte eine Slack/Teams/Email-Benachrichtigung stehen
          
      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Pipeline failed!"
          # Hier könnte eine Slack/Teams/Email-Benachrichtigung stehen