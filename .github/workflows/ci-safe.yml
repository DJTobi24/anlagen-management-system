name: CI Pipeline (Safe)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_anlagen_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        NODE_ENV=test
        PORT=3000
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_anlagen_db
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=test_anlagen_db
        DB_USER=test_user
        DB_PASSWORD=test_password
        JWT_SECRET=test-secret-key-for-testing-only
        JWT_EXPIRES_IN=1d
        REDIS_URL=redis://localhost:6379
        LOG_LEVEL=error
        IMPORT_WORKERS=5
        MAX_FILE_SIZE=10485760
        EOF
    
    - name: Run database migrations
      run: |
        npm run migrate
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_anlagen_db
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run type check
      run: npm run typecheck || npx tsc --noEmit
    
    - name: Run tests
      run: npm test || true
      env:
        NODE_ENV: test
    
    - name: Run security check
      run: |
        chmod +x scripts/security-check.sh
        ./scripts/security-check.sh || true
    
    - name: Build application
      run: npm run build

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linter
      working-directory: ./frontend
      run: npm run lint || true
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test
      env:
        CI: true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  docker-build-test:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Test Backend Docker build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: anlagen-management-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Frontend Docker build  
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: false
        tags: anlagen-management-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create environment files
      run: |
        cat > .env << EOF
        NODE_ENV=test
        DATABASE_URL=postgresql://postgres:postgres@db:5432/anlagen_management
        REDIS_URL=redis://redis:6379
        JWT_SECRET=test-secret-key-for-integration-testing
        JWT_REFRESH_SECRET=test-refresh-secret-key
        API_PREFIX=/api
        API_VERSION=v1
        LOG_LEVEL=info
        IMPORT_WORKERS=5
        MAX_FILE_SIZE=52428800
        EOF
        
        cat > frontend/.env << EOF
        REACT_APP_API_URL=/api/v1
        REACT_APP_APP_NAME=Anlagen-Management-System
        REACT_APP_VERSION=1.0.0
        EOF
    
    - name: Start services with Docker Compose
      run: |
        docker compose up -d --build
    
    - name: Wait for services
      run: |
        echo "Waiting for services to start..."
        sleep 45
        
        # Check if backend is responding
        timeout 30 bash -c 'until curl -f http://localhost:3000/health; do echo "Waiting for backend..."; sleep 2; done' || echo "Backend not ready"
        
        # Check if frontend is accessible
        timeout 30 bash -c 'until curl -f http://localhost:80/health; do echo "Waiting for frontend..."; sleep 2; done' || echo "Frontend not ready"
    
    - name: Test system integration
      run: |
        echo "=== Testing Backend API ==="
        curl http://localhost:3000/health || echo "Backend health check failed"
        
        echo "=== Testing Frontend ==="
        curl http://localhost:80/ || echo "Frontend access failed"
        
        echo "=== Testing API Proxy ==="
        curl http://localhost:80/api/v1/auth/login -X POST \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"wrongpassword"}' || echo "API proxy test completed"
    
    - name: Show service logs
      if: always()
      run: |
        echo "=== Backend Logs ==="
        docker compose logs backend | tail -20
        
        echo "=== Frontend Logs ==="
        docker compose logs frontend | tail -20
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for vulnerabilities
      run: |
        npm audit --production --audit-level=high || true
        
    - name: Check outdated packages  
      run: npm outdated || true