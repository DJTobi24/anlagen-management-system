apiVersion: apps/v1
kind: Deployment
metadata:
  name: ams-backend
  namespace: ams-${ENVIRONMENT}
  labels:
    app: ams-backend
    environment: ${ENVIRONMENT}
    version: ${VERSION}
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ams-backend
      environment: ${ENVIRONMENT}
  template:
    metadata:
      labels:
        app: ams-backend
        environment: ${ENVIRONMENT}
        version: ${VERSION}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ams-backend-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ${BACKEND_IMAGE}
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: ${ENVIRONMENT}
        - name: PORT
          value: "5000"
        - name: DB_HOST
          value: ams-postgres
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: ams-config
              key: db-name
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: ams-config
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ams-secrets
              key: db-password
        - name: REDIS_URL
          value: redis://ams-redis:6379
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ams-secrets
              key: jwt-secret
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: ams-secrets
              key: jwt-refresh-secret
        - name: LOG_LEVEL
          value: info
        - name: ENABLE_METRICS
          value: "true"
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: ams-uploads-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: ams-logs-pvc
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: ams-backend
  namespace: ams-${ENVIRONMENT}
  labels:
    app: ams-backend
    environment: ${ENVIRONMENT}
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: ams-backend
    environment: ${ENVIRONMENT}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ams-backend-sa
  namespace: ams-${ENVIRONMENT}
  labels:
    app: ams-backend
    environment: ${ENVIRONMENT}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ams-backend-pdb
  namespace: ams-${ENVIRONMENT}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ams-backend
      environment: ${ENVIRONMENT}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ams-backend-hpa
  namespace: ams-${ENVIRONMENT}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ams-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60